[versions]
kotlin-compose-plugin = "1.8.0-beta01"
kotlin-adaptive = "1.1.0-beta01"
kotlin-navigation = "2.9.0-alpha15"
kotlin-window = "1.4.0-alpha05"

androidGradlePlugin = "8.2.0"

kotlin = "2.1.20"

kotlinx-datetime = "0.6.2"
kotlinx-serialization = "1.8.0"
kotlinx-coroutines = "1.10.1"

kotlin-logger = "7.0.5"
slf4j = "2.0.17"
logbackClassic = "1.5.18"

androidx-compose-bom = "2025.03.00"
androidx-activityCompose = "1.10.1"
androidx-window = "1.4.0-rc01"

sqldelight = "2.0.2"

koin = "3.5.6"

voyager = "1.0.1"

jackson = "2.18.2"
assertj = "3.25.3"
lombok = "8.13"
springBoot2 = "2.7.18"
spring-boot = "3.4.4"
springCloudSpringBoot2 = "2021.0.9" # 2021.0.x aka Jubilee	2.6.x, 2.7.x (Starting with 2021.0.3)
springCloud = "2024.0.1"
springSecurityKerberosSpring5 = "1.0.1.RELEASE"
springSecurityKerberos = "2.1.1"
ibmMqStarterSpringBoot2 = "2.7.18" # 2.7.x for spring boot 2.7.x
ibmMqStarter = "3.4.3"
liquibaseR2dbcStarterSpringBoot2 = "2.7.15"
liquibaseR2dbcStarter = "3.1.3"
springDocSpring5 = "1.8.0" # 1.8.x for spring boot 2
springDoc = "2.8.6"
springwolf = "1.11.0"
wiremockStarter = "3.9.0"

kotlin-spring = "1.9.24"
coroutines-spring = "1.8.1"
kotlinLogging-spring = "6.0.9"

# --> testing
testngJava8 = "7.5.1" # 7.5.1 is last version for java 8
testng = "7.11.0"
junit5 = "5.12.1"
springMockkSpring5 = "3.1.2"
springMockk = "4.0.2"
wiremockJava8 = "2.35.1" # 2.x.x for java 8
wiremock = "3.12.1"
testcontainers = "1.20.6"
testcontainers-redis = "2.2.4"
mockitoKotlin = "5.4.0"
awaitility = "4.2.2"
# <-- testing

kerb4jJava8 = "0.1.4" # 0.2.x+ for java 17
kerb4j = "0.2.0"
quartz = "2.5.0"
jakartaJws = "3.0.0"
logstashLogbackEncoderJava8 = "7.4"
logstashLogbackEncoder = "8.0"
#https://github.com/ibm-messaging/mq-jms-spring/blob/master/build.gradle#L40
ibmMq = "9.4.2.0"
jasperReports = "7.0.2"
hibernateTypes = "3.9.5"
freemarker = "2.3.33"
nvi18n = "1.29"
nimbusJoseJwtSpring5 = "9.24.4"
nimbusOidcSdkSpring5 = "9.43.3"
nimbusJoseJwt = "9.37.3"
nimbusOidcSdk = "9.43.3"
logbook = "3.11.0"
threeten = "1.8.0"
pdfbox = "3.0.3"
shedlockSpring5 = "4.47.0" # 4.x.x for java 8, spring 5
shedlock = "5.16.0"
resilience4jJava8 = "1.7.0"
resilience4j = "2.3.0"
cronUtils = "9.2.1"
transactionOutboxSpring5 = "5.2.337" # 5.2.337 is last version for spring 5, jdk 11
transactionOutbox = "6.0.585"
woodstox = "7.1.0"
jasypt = "1.9.3"
micrometerContextPropagation = "1.1.2"
dbScheduler = "15.3.0"
confluent = "7.7.1"
apachePoi = "5.3.0"
fastExcel = "0.18.4"
lettuce = "6.5.5.RELEASE"
kerby = "2.1.0"
guava = "33.4.6-jre"
jUniversalChardet = "2.5.0"
cxfJava8 = "3.6.3" # Версия 4.x.x+ for 11 jdk
cxf = "4.0.5"
xstreamJava8 = "1.4.20" # 1.5 will require Java 11
jvnetJaxbJava8 = "3.0.2"
jvnetJaxb = "4.0.8"
apacheHttpClient4 = "4.5.14"
apacheHttpClient5 = "5.4"
apacheCommonsText = "1.12.0" # Следить за версиями между lang3 https://github.com/apache/commons-text/blob/master/pom.xml#L89
jobrunr = "7.4.1"
greenmail = "2.1.3"
kryoVersion = "5.6.2"

asciidoctor = "4.0.4"
sonarQube = "6.1.0.5360"
dokka = "2.0.0"
wsdl2java = "2.0.2"
xjc = "1.8.2"
cyclonedxBom = "2.2.0"

[libraries]
kotlin-bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-serialization-bom = { module = "org.jetbrains.kotlinx:kotlinx-serialization-bom", version.ref = "kotlinx-serialization" }
kotlinx-coroutines-bom = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-bom", version.ref = "kotlinx-coroutines" }

kotlin-window-core = { module = "org.jetbrains.androidx.window:window-core", version.ref = "kotlin-window" }

kotlin-compose-adaptive = { module = "org.jetbrains.compose.material3.adaptive:adaptive", version.ref = "kotlin-adaptive" }
kotlin-compose-adaptive-layout = { module = "org.jetbrains.compose.material3.adaptive:adaptive-layout", version.ref = "kotlin-adaptive" }
kotlin-compose-adaptive-navigation = { module = "org.jetbrains.compose.material3.adaptive:adaptive-navigation", version.ref = "kotlin-adaptive" }

kotlin-compose-adaptive-navigation-suite = { module = "org.jetbrains.compose.material3:material3-adaptive-navigation-suite", version.ref = "kotlin-compose-plugin" }

kotlin-navigation-runtime = { module = "org.jetbrains.androidx.navigation:navigation-runtime", version.ref = "kotlin-navigation" }
kotlin-navigation-common = { module = "org.jetbrains.androidx.navigation:navigation-common", version.ref = "kotlin-navigation" }
kotlin-navigation-compose = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "kotlin-navigation" }

kotlin-logging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlin-logger" }
slf4j-bom = { module = "org.slf4j:slf4j-bom", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logbackClassic" }

androidx-compose-bom = { module = "androidx.compose:compose-bom", version.ref = "androidx-compose-bom" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-window = { module = "androidx.window:window", version.ref = "androidx-window" }
androidx-window-core = { module = "androidx.window:window-core", version.ref = "androidx-window" }

sqldelight-driver-sqlite = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqldelight" }
sqldelight-driver-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-driver-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelight-driver-web-worker = { module = "app.cash.sqldelight:web-worker-driver", version.ref = "sqldelight" }
sqldelight-runtime = { module = "app.cash.sqldelight:runtime", version.ref = "sqldelight" }
sqldelight-primitive-adapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqldelight" }
sqldelight-extensions-coroutine = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }

koin-bom = { module = "io.insert-koin:koin-bom", version.ref = "koin" }

voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyager" }
voyager-screenModel = { module = "cafe.adriel.voyager:voyager-screenmodel", version.ref = "voyager" }
voyager-bottomSheetNavigator = { module = "cafe.adriel.voyager:voyager-bottom-sheet-navigator", version.ref = "voyager" }
voyager-tabNavigator = { module = "cafe.adriel.voyager:voyager-tab-navigator", version.ref = "voyager" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyager" }
voyager-koin = { module = "cafe.adriel.voyager:voyager-koin", version.ref = "voyager" }

assertj-bom = { module = "org.assertj:assertj-bom", version.ref = "assertj" }
jackson-bom = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }

# --> spring

spring-boot-dependencies-spring-boot2 = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "springBoot2" }
spring-cloud-dependencies-spring-boot2 = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "springCloudSpringBoot2" }
spring-boot-dependencies = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "spring-boot" }
spring-cloud-dependencies = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "springCloud" }

spring-security-kerberos-bom = { module = "org.springframework.security.kerberos:spring-security-kerberos-bom", version.ref = "springSecurityKerberos" }
# В версии 2.1.* сломали spring-security-kerberos-bom
spring-security-kerberos-core = { module = "org.springframework.security.kerberos:spring-security-kerberos-core", version.ref = "springSecurityKerberos" }
spring-security-kerberos-client = { module = "org.springframework.security.kerberos:spring-security-kerberos-client", version.ref = "springSecurityKerberos" }
spring-security-kerberos-web = { module = "org.springframework.security.kerberos:spring-security-kerberos-web", version.ref = "springSecurityKerberos" }
spring-security-kerberos-test = { module = "org.springframework.security.kerberos:spring-security-kerberos-test", version.ref = "springSecurityKerberos" }

spring-security-kerberos-core-spring5 = { module = "org.springframework.security.kerberos:spring-security-kerberos-core", version.ref = "springSecurityKerberosSpring5" }
spring-security-kerberos-web-spring5 = { module = "org.springframework.security.kerberos:spring-security-kerberos-web", version.ref = "springSecurityKerberosSpring5" }

mq-jms-spring-boot-starter-spring-boot2 = { module = "com.ibm.mq:mq-jms-spring-boot-starter", version.ref = "ibmMqStarterSpringBoot2" }
mq-jms-spring-boot-starter = { module = "com.ibm.mq:mq-jms-spring-boot-starter", version.ref = "ibmMqStarter" }

springdoc-openapi-webmvc-core-spring5 = { module = "org.springdoc:springdoc-openapi-webmvc-core", version.ref = "springDocSpring5" }
springdoc-openapi-common-spring5 = { module = "org.springdoc:springdoc-openapi-common", version.ref = "springDocSpring5" }
springdoc-openapi-ui-spring5 = { module = "org.springdoc:springdoc-openapi-ui", version.ref = "springDocSpring5" }
springdoc-openapi-webflux-ui-spring5 = { module = "org.springdoc:springdoc-openapi-webflux-ui", version.ref = "springDocSpring5" }
springdoc-openapi-security-spring5 = { module = "org.springdoc:springdoc-openapi-security", version.ref = "springDocSpring5" }
springdoc-openapi-kotlin-spring5 = { module = "org.springdoc:springdoc-openapi-kotlin", version.ref = "springDocSpring5" }

springdoc-openapi-starter-common = { module = "org.springdoc:springdoc-openapi-starter-common", version.ref = "springDoc" }
springdoc-openapi-starter-webmvc-api = { module = "org.springdoc:springdoc-openapi-starter-webmvc-api", version.ref = "springDoc" }
springdoc-openapi-starter-webmvc-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springDoc" }
springdoc-openapi-starter-webflux-api = { module = "org.springdoc:springdoc-openapi-starter-webflux-api", version.ref = "springDoc" }
springdoc-openapi-starter-webflux-ui = { module = "org.springdoc:springdoc-openapi-starter-webflux-ui", version.ref = "springDoc" }

springwolf-kafka = { module = "io.github.springwolf:springwolf-kafka", version.ref = "springwolf" }
springwolf-sns = { module = "io.github.springwolf:springwolf-sns", version.ref = "springwolf" }
springwolf-sqs = { module = "io.github.springwolf:springwolf-sqs", version.ref = "springwolf" }
springwolf-stomp = { module = "io.github.springwolf:springwolf-stomp", version.ref = "springwolf" }
springwolf-amqp = { module = "io.github.springwolf:springwolf-amqp", version.ref = "springwolf" }
springwolf-jms = { module = "io.github.springwolf:springwolf-jms", version.ref = "springwolf" }
springwolf-cloud-stream = { module = "io.github.springwolf:springwolf-cloud-stream", version.ref = "springwolf" }
springwolf-ui = { module = "io.github.springwolf:springwolf-ui", version.ref = "springwolf" }
springwolf-common-model-converters = { module = "io.github.springwolf:springwolf-common-model-converters", version.ref = "springwolf" }
springwolf-generic-binding = { module = "io.github.springwolf:springwolf-generic-binding", version.ref = "springwolf" }
springwolf-json-schema = { module = "io.github.springwolf:springwolf-json-schema", version.ref = "springwolf" }

kerb4j-server-spring-security-java8 = { module = "com.kerb4j:kerb4j-server-spring-security", version.ref = "kerb4jJava8" }
kerb4j-server-spring-security = { module = "com.kerb4j:kerb4j-server-spring-security", version.ref = "kerb4j" }

liquibase-r2dbc-spring-boot-starter-spring-boot2 = { module = "io.github.daggerok:liquibase-r2dbc-spring-boot-starter", version.ref = "liquibaseR2dbcStarterSpringBoot2" }
liquibase-r2dbc-spring-boot-starter = { module = "io.github.daggerok:liquibase-r2dbc-spring-boot-starter", version.ref = "liquibaseR2dbcStarter" }
db-scheduler-spring-boot-starter = { module = "com.github.kagkarlsson:db-scheduler-spring-boot-starter", version.ref = "dbScheduler" }

transactionoutbox-core-java8 = { module = "com.gruelbox:transactionoutbox-core", version.ref = "transactionOutboxSpring5" }
transactionoutbox-spring-java8 = { module = "com.gruelbox:transactionoutbox-spring", version.ref = "transactionOutboxSpring5" }
transactionoutbox-jackson-java8 = { module = "com.gruelbox:transactionoutbox-jackson", version.ref = "transactionOutboxSpring5" }
transactionoutbox-core = { module = "com.gruelbox:transactionoutbox-core", version.ref = "transactionOutbox" }
transactionoutbox-spring = { module = "com.gruelbox:transactionoutbox-spring", version.ref = "transactionOutbox" }
transactionoutbox-jackson = { module = "com.gruelbox:transactionoutbox-jackson", version.ref = "transactionOutbox" }

wiremock-spring-boot = { module = "org.wiremock.integrations:wiremock-spring-boot", version.ref = "wiremockStarter" }
# <-- spring

# --> kotlin

kotlin-spring-bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin-spring" }
kotlinx-coroutines-spring-bom = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-bom", version.ref = "coroutines-spring" }

kotlin-logging-spring = { module = "io.github.oshai:kotlin-logging-jvm", version.ref = "kotlinLogging-spring" }

# <-- kotlin

logbook-bom = { module = "org.zalando:logbook-bom", version.ref = "logbook" }
shedlock-bom-java8 = { module = "net.javacrumbs.shedlock:shedlock-bom", version.ref = "shedlockSpring5" }
shedlock-bom = { module = "net.javacrumbs.shedlock:shedlock-bom", version.ref = "shedlock" }
resilience4j-bom-java8 = { module = "io.github.resilience4j:resilience4j-bom", version.ref = "resilience4jJava8" }
resilience4j-bom = { module = "io.github.resilience4j:resilience4j-bom", version.ref = "resilience4j" }
cxf-bom-java8 = { module = "org.apache.cxf:cxf-bom", version.ref = "cxfJava8" }
cxf-bom = { module = "org.apache.cxf:cxf-bom", version.ref = "cxf" }
kerby-bom = { module = "org.apache.kerby:kerby-bom", version.ref = "kerby" }

jakarta-jws-api = { module = "jakarta.jws:jakarta.jws-api", version.ref = "jakartaJws" }
ibm-mq-allclient = { module = "com.ibm.mq:com.ibm.mq.allclient", version.ref = "ibmMq" }
ibm-mq-jakarta-client = { module = "com.ibm.mq:com.ibm.mq.jakarta.client", version.ref = "ibmMq" }
woodstox-core = { module = "com.fasterxml.woodstox:woodstox-core", version.ref = "woodstox" }
# https://github.com/spring-projects/spring-security/blob/5.8.x/gradle/libs.versions.toml#L25
oauth2-oidc-sdk-spring5 = { module = "com.nimbusds:oauth2-oidc-sdk", version.ref = "nimbusOidcSdkSpring5" } #Брать версию как в спринге. Перестал поставляться в зависимостях у спринга
nimbus-jose-jwt-spring5 = { module = "com.nimbusds:nimbus-jose-jwt", version.ref = "nimbusJoseJwtSpring5" } #Брать версию как в спринге. Перестал поставляться в зависимостях у спринга
oauth2-oidc-sdk = { module = "com.nimbusds:oauth2-oidc-sdk", version.ref = "nimbusOidcSdk" } #Брать версию как в спринге. Перестал поставляться в зависимостях у спринга
nimbus-jose-jwt = { module = "com.nimbusds:nimbus-jose-jwt", version.ref = "nimbusJoseJwt" } #Брать версию как в спринге. Перестал поставляться в зависимостях у спринга
nv-i18n = { module = "com.neovisionaries:nv-i18n", version.ref = "nvi18n" }
threeten-extra = { module = "org.threeten:threeten-extra", version.ref = "threeten" }
pdfbox = { module = "org.apache.pdfbox:pdfbox", version.ref = "pdfbox" }
# https://github.com/spring-projects/spring-data-jpa/blob/2.7.x/pom.xml#L33
hypersistence-utils-hibernate55 = { module = "io.hypersistence:hypersistence-utils-hibernate-55", version.ref = "hibernateTypes" }
hypersistence-utils-hibernate60 = { module = "io.hypersistence:hypersistence-utils-hibernate-60", version.ref = "hibernateTypes" }
hypersistence-utils-hibernate62 = { module = "io.hypersistence:hypersistence-utils-hibernate-62", version.ref = "hibernateTypes" }
hypersistence-utils-hibernate63 = { module = "io.hypersistence:hypersistence-utils-hibernate-63", version.ref = "hibernateTypes" }
jasperreports = { module = "net.sf.jasperreports:jasperreports", version.ref = "jasperReports" }
freemarker = { module = "org.freemarker:freemarker", version.ref = "freemarker" }
logstash-logback-encoder-java8 = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstashLogbackEncoderJava8" }
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstashLogbackEncoder" }
shedlock-provider-jdbc-java8 = { module = "net.javacrumbs.shedlock:shedlock-provider-jdbc", version.ref = "shedlockSpring5" } # Отсутствует в BOM от shedlock
shedlock-provider-jdbc = { module = "net.javacrumbs.shedlock:shedlock-provider-jdbc", version.ref = "shedlock" } # Отсутствует в BOM от shedlock
cron-utils = { module = "com.cronutils:cron-utils", version.ref = "cronUtils" }
jasypt = { module = "org.jasypt:jasypt", version.ref = "jasypt" }
kafka-avro-serializer = { module = "io.confluent:kafka-avro-serializer", version.ref = "confluent" }
poi = { module = "org.apache.poi:poi", version.ref = "apachePoi" }
poi-ooxml = { module = "org.apache.poi:poi-ooxml", version.ref = "apachePoi" }
fastexcel = { module = "org.dhatim:fastexcel", version.ref = "fastExcel" }
fastexcel-reader = { module = "org.dhatim:fastexcel-reader", version.ref = "fastExcel" }
lettuce-core = { module = "io.lettuce:lettuce-core", version.ref = "lettuce" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }
juniversalchardet = { module = "com.github.albfernandez:juniversalchardet", version.ref = "jUniversalChardet" }
jaxb-plugins-runtime-java8 = { module = "org.jvnet.jaxb:jaxb-plugins-runtime", version.ref = "jvnetJaxbJava8" }
jaxb-plugins-java8 = { module = "org.jvnet.jaxb:jaxb-plugins", version.ref = "jvnetJaxbJava8" }
jaxb-plugins-runtime = { module = "org.jvnet.jaxb:jaxb-plugins-runtime", version.ref = "jvnetJaxb" }
jaxb-plugins = { module = "org.jvnet.jaxb:jaxb-plugins", version.ref = "jvnetJaxb" }
apache-httpclient = { module = "org.apache.httpcomponents:httpclient", version.ref = "apacheHttpClient4" }
apache-httpclient5 = { module = "org.apache.httpcomponents.client5:httpclient5", version.ref = "apacheHttpClient5" }
xstream = { module = "com.thoughtworks.xstream:xstream", version.ref = "xstreamJava8" }
micrometer-context-propagation = { module = "io.micrometer:context-propagation", version.ref = "micrometerContextPropagation" }
apacheCommonsText = { module = "org.apache.commons:commons-text", version.ref = "apacheCommonsText" }

jobrunr = { module = "org.jobrunr:jobrunr", version.ref = "jobrunr" }
jobrunr-spring-boot2-starter = { module = "org.jobrunr:jobrunr-spring-boot-2-starter", version.ref = "jobrunr" }
jobrunr-spring-boot3-starter = { module = "org.jobrunr:jobrunr-spring-boot-3-starter", version.ref = "jobrunr" }
jobrunr-kotlin19-support = { module = "org.jobrunr:jobrunr-kotlin-1.9-support", version.ref = "jobrunr" }
jobrunr-kotlin20-support = { module = "org.jobrunr:jobrunr-kotlin-2.0-support", version.ref = "jobrunr" }

greenmail = { module = "com.icegreen:greenmail", version.ref = "greenmail" }
greenmail-spring = { module = "com.icegreen:greenmail-spring", version.ref = "greenmail" }
greenmail-junit5 = { module = "com.icegreen:greenmail-junit5", version.ref = "greenmail" }

quartz-scheduler = { module = "org.quartz-scheduler:quartz", version.ref = "quartz" }

kryo = { module = "com.esotericsoftware:kryo", version.ref = "kryoVersion" }
kryo-library = { module = "com.esotericsoftware.kryo:kryo5", version.ref = "kryoVersion" }

# --> testing

testcontainers-bom = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }
testcontainers-redis = { module = "com.redis:testcontainers-redis", version.ref = "testcontainers-redis" }
junit-bom = { module = "org.junit:junit-bom", version.ref = "junit5" }

testng-java8 = { module = "org.testng:testng", version.ref = "testngJava8" }
testng = { module = "org.testng:testng", version.ref = "testng" }
springmockk-spring5 = { module = "com.ninja-squad:springmockk", version.ref = "springMockkSpring5" }
springmockk = { module = "com.ninja-squad:springmockk", version.ref = "springMockk" }
wiremock-jre8 = { module = "com.github.tomakehurst:wiremock-jre8", version.ref = "wiremockJava8" }
wiremock = { module = "org.wiremock:wiremock", version.ref = "wiremock" }
wiremock-standalone = { module = "org.wiremock:wiremock-standalone", version.ref = "wiremock" }
wiremock-jetty12 = { module = "org.wiremock:wiremock-jetty12", version.ref = "wiremock" }

mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockitoKotlin" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
# <-- testing

# --> plugins lib
springBoot2-plugin = { module = "org.springframework.boot:spring-boot-gradle-plugin", version.ref = "springBoot2" }
springBoot-plugin = { module = "org.springframework.boot:spring-boot-gradle-plugin", version.ref = "spring-boot" }

kotlin-jvm-plugin = { module = "org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin", version.ref = "kotlin-spring" }
kotlin-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin-spring" }
kotlin-allopen-plugin = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin-spring" }
kotlin-noarg-plugin = { module = "org.jetbrains.kotlin:kotlin-noarg", version.ref = "kotlin-spring" }
kotlin-lombok-plugin = { module = "org.jetbrains.kotlin:kotlin-lombok", version.ref = "kotlin-spring" }

lombok-plugin = { module = "io.freefair.gradle:lombok-plugin", version.ref = "lombok" }
sonarqube-plugin = { module = "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin", version.ref = "sonarQube" }
# <-- plugins lib

[plugins]
android-application = { id = "com.android.application", version.ref = "androidGradlePlugin" }
android-library = { id = "com.android.library", version.ref = "androidGradlePlugin" }
compose = { id = "org.jetbrains.compose", version.ref = "kotlin-compose-plugin" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }
kotlin-compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-cocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
kotlin-allopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin" }
kotlin-noarg = { id = "org.jetbrains.kotlin.plugin.noarg", version.ref = "kotlin" }
kotlin-jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-lombok = { id = "org.jetbrains.kotlin.plugin.lombok", version.ref = "kotlin" }

springBoot2 = { id = "org.springframework.boot", version.ref = "springBoot2" }
springBoot = { id = "org.springframework.boot", version.ref = "spring-boot" }
asciidoctor = { id = "org.asciidoctor.jvm.convert", version.ref = "asciidoctor" }
lombok = { id = "io.freefair.lombok", version.ref = "lombok" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarQube" }
wsdl2java = { id = "com.github.bjornvester.wsdl2java", version.ref = "wsdl2java" }
xjc = { id = "com.github.bjornvester.xjc", version.ref = "xjc" }
cyclonedxBom = { id = "org.cyclonedx.bom", version.ref = "cyclonedxBom" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
kotlin-jvm-spring = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin-spring" }
kotlin-kapt-spring = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin-spring" }
kotlin-allopen-spring = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin-spring" }
kotlin-noarg-spring = { id = "org.jetbrains.kotlin.plugin.noarg", version.ref = "kotlin-spring" }
kotlin-jpa-spring = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin-spring" }
kotlin-spring-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin-spring" }
kotlin-lombok-spring = { id = "org.jetbrains.kotlin.plugin.lombok", version.ref = "kotlin-spring" }